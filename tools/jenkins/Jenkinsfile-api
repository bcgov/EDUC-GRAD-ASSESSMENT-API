pipeline{
    agent {
        label 'maven'
    }
    environment{
        TOOLS_NAMESPACE = '77c02f-tools'
        DEV_NAMESPACE = '77c02f-dev'
        TEST_NAMESPACE = '77c02f-test'
        UAT_NAMESPACE = '77c02f-uat'
        PROD_NAMESPACE = '77c02f-prod'

        REPO_NAME = 'educ-grad-assessment-api'
        ORG = 'bcgov'
        BRANCH = 'main'
        TAG = 'dev'

        APP_NAME = 'educ-grad-assessment-api'
        APP_DOMAIN = 'apps.silver.devops.gov.bc.ca'

        SOURCE_REPO_URL = 'https://github.com/${ORG}/${REPO_NAME}'
        SOURCE_REPO_URL_RAW = 'https://raw.githubusercontent.com/${ORG}/${REPO_NAME}'

        DEV_HOST_ROUTE = "${APP_NAME}-${DEV_NAMESPACE}.${APP_DOMAIN}"
        TEST_HOST_ROUTE = "${APP_NAME}-${TEST_NAMESPACE}.${APP_DOMAIN}"
        UAT_HOST_ROUTE = "${APP_NAME}-${UAT_NAMESPACE}.${APP_DOMAIN}"
        PROD_HOST_ROUTE = "${APP_NAME}-${PROD_NAMESPACE}.${APP_DOMAIN}"
    }
    stages {
        stage('Build') {
            steps {
                script {
                    openshift.withCluster() {
                        def bcTemplate =
                        openshift.apply(
                                openshift.process("-f", "${SOURCE_REPO_URL_RAW}/${BRANCH}/tools/openshift/api.bc.yaml",
                                        "REPO_NAME=${REPO_NAME}")
                        )
                        def bc = openshift.selector("bc", "${REPO_NAME}-bc").startBuild()
                        sleep(20)
                        bc.logs('-f')
                    }
                }
            }
            post {
                success {
                    echo 'Build Success'
                }
                failure {
                    echo 'Build stage Failed!'
                }
            }
        }
        stage('Deploy to DEV') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(TOOLS_NAMESPACE) {
                            openshift.apply(
                                        openshift.process("-f", "${SOURCE_REPO_URL_RAW}/${BRANCH}/tools/openshift/api.dc.yaml",
                                        "REPO_NAME=${REPO_NAME}", "HOST_ROUTE=${DEV_HOST_ROUTE}")
                                    )
                            openshift.selector("dc", "${REPO_NAME}-dc").rollout().latest()
                            def latestDeploymentVersion = openshift.selector('dc',"${REPO_NAME}-dc").object().status.latestVersion
                            def rc = openshift.selector('rc', "${REPO_NAME}-dc-${latestDeploymentVersion}")
                            timeout (time: 10, unit: 'MINUTES') {
                                rc.untilEach(1){
                                    def rcMap = it.object()
                                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                                }
                            }
                        }
                    }
                }
            }
            post {
                success {
                    echo "${REPO_NAME} successfully deployed to DEV"
                    script {
                        openshift.withCluster() {
                            openshift.withProject(TOOLS_NAMESPACE) {
                                echo "Tagging image"
                                openshift.tag("${TOOLS_NAMESPACE}/${REPO_NAME}:latest", "${REPO_NAME}:${TAG}")
                            }
                        }
                    }
                }
                failure {
                    echo "${REPO_NAME} deployment to DEV Failed!"
                }
            }
        }
    }
}