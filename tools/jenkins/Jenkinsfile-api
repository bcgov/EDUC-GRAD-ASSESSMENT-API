pipeline{
    agent {
        label 'maven'
    }
    environment{
        TOOLS = '77c02f-tools'
        DEV = '77c02f-dev'
        TEST = '77c02f-test'
        PROD = '77c02f-prod'

        REPO_NAME = 'educ-grad-assessment-api'
        ORG = 'bcgov'
        JOB_NAME = 'main'
        TAG = 'dev'

        APP_NAME = 'educ-grad-assessment-api'
        APP_DOMAIN = 'apps.silver.devops.gov.bc.ca'

        SOURCE_REPO_URL = 'https://github.com/${ORG}/${REPO_NAME}'
        SOURCE_REPO_URL_RAW = 'https://raw.githubusercontent.com/${ORG}/${REPO_NAME}'

        TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
        DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
        TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
        PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
    }
    stage('Build Image') {
        steps {
            script {
                openshift.withCluster() {
                    def bcTemplate = openshift.process("-f",
                        "${SOURCE_REPO_URL_RAW}/develop/km/tools/openshift/api.bc.yaml",
                        "REPO_NAME=${REPO_NAME}")
                    def bc = openshift.apply(bcTemplate)
                    openshift.selector("bc", "${REPO_NAME}-bc").startBuild().logs('-f')
                }
            }
        }
        post {
            success {
                echo 'Build Success'
            }
            failure {
                echo 'Build stage failed'
            }
        }
    }
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv, String tag) {

  if (!stageEnv.equalsIgnoreCase('Tools')) {
    input("Deploy to ${projectEnv}?")
  }

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${tag}")
      def dcTemplate = openshift.process('-f',
        'tools/openshift/api.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${tag}"
      )

      echo "Applying Deployment ${REPO_NAME}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}
